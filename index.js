require('dotenv').config()
const { STICKER, BOT_API, WEATHER_API, MONGODB_URI } = process.env

const { MongoClient } = require('mongodb')
const client = new MongoClient(MONGODB_URI)

client.connect()
const db = client.db('weather-bot')

const users = db.collection('users')
const info = db.collection('info')

const axios = require('axios')
const TelegramApi = require('node-telegram-bot-api')

const token = BOT_API
const bot = new TelegramApi(token, { polling: true })

function translit(word){
	let answer = ''
	let converter = {
		'–∞': 'a',    '–±': 'b',    '–≤': 'v',    '–≥': 'g',    '–¥': 'd',
		'–µ': 'e',    '—ë': 'e',    '–∂': 'zh',   '–∑': 'z',    '–∏': 'i',
		'–π': 'y',    '–∫': 'k',    '–ª': 'l',    '–º': 'm',    '–Ω': 'n',
		'–æ': 'o',    '–ø': 'p',    '—Ä': 'r',    '—Å': 's',    '—Ç': 't',
		'—É': 'u',    '—Ñ': 'f',    '—Ö': 'h',    '—Ü': 'c',    '—á': 'ch',
		'—à': 'sh',   '—â': 'sch',  '—å': '',     '—ã': 'y',    '—ä': '',
		'—ç': 'e',    '—é': 'yu',   '—è': 'ya',
 
		'–ê': 'A',    '–ë': 'B',    '–í': 'V',    '–ì': 'G',    '–î': 'D',
		'–ï': 'E',    '–Å': 'E',    '–ñ': 'Zh',   '–ó': 'Z',    '–ò': 'I',
		'–ô': 'Y',    '–ö': 'K',    '–õ': 'L',    '–ú': 'M',    '–ù': 'N',
		'–û': 'O',    '–ü': 'P',    '–†': 'R',    '–°': 'S',    '–¢': 'T',
		'–£': 'U',    '–§': 'F',    '–•': 'H',    '–¶': 'C',    '–ß': 'Ch',
		'–®': 'Sh',   '–©': 'Sch',  '–¨': '',     '–´': 'Y',    '–™': '',
		'–≠': 'E',    '–Æ': 'Yu',   '–Ø': 'Ya'
	}
 
	for (let i = 0; i < word.length; ++i ) {
		if (converter[word[i]] == undefined){
			answer += word[i]
		} else {
			answer += converter[word[i]]
		}
	}
 
	return answer
}

let isPost = false

bot.on('message', async (msg) => {
    const text = msg.text
    const chatId = msg.chat.id

    if (text === '/start') {
        await bot.sendSticker(chatId, STICKER)
        await bot.sendMessage(chatId,
            `üëã –ü—Ä–∏–≤–µ—Ç ${msg.from.first_name}${(msg.from.last_name === undefined) ? '': ` ${msg.from.last_name}`}!\n` +
            'üå§ –≠—Ç–æ –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç.\n' +
            'üë®‚Äçüíª –ê–≤—Ç–æ—Ä: @SmartMainnet'
        )
        await bot.sendMessage(chatId,
            '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,\n' +
            '–Ω–∞–ø—Ä–∏–º–µ—Ä –ú–æ—Å–∫–≤–∞,\n' +
            '—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ –ø–æ–≥–æ–¥—É.'
        )

        await users.findOne({ id: chatId }).then(async res => {
            if (res === null) {
                await users.insertOne({
                    id: chatId,
                    username: msg.from.username,
                    first_name: msg.from.first_name,
                    last_name: msg.from.last_name,
                    start_date: new Date(),
                    calls: 0
                })
                await info.updateOne({}, { $inc: { users: 1 } })
            }
        })
    } else if (text === '/post' && msg.from.username === 'SmartMainnet') {
        await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ—Å—Ç')
        isPost = true
    } else if (isPost === true && msg.from.username === 'SmartMainnet') {
        users.find().toArray(async (err, res) => {
            for (let user of res) {
                let chatId = user.id
                await bot.sendMessage(chatId, text)
            }
        })
        isPost = false
    } else {
        await users.findOne({ id: chatId }).then(async res => {
            if (res === null) {
                await users.insertOne({
                    id: chatId,
                    username: msg.from.username,
                    first_name: msg.from.first_name,
                    last_name: msg.from.last_name,
                    start_date: new Date(),
                    calls: 0
                })
                await info.updateOne({}, { $inc: { users: 1 } })
            }
        })

        try {
            let city = translit(text)
            let url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=ru&units=metric&appid=${WEATHER_API}`

            await axios.get(url).then(async res => {
                await bot.sendMessage(chatId,
                    `‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: ${res.data.weather[0].description}\n` +
                    `‚òÄÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${Math.round(res.data.main.temp)}¬∞C\n` +
                    `üí® –í–µ—Ç–µ—Ä: ${(res.data.wind.speed / 3.6).toFixed(1)} –º/—Å\n` +
                    `üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${res.data.main.humidity}%\n`
                )
            })

            await users.updateOne({ id: chatId },
                {
                    $set: {
                        username: msg.from.username,
                        first_name: msg.from.first_name,
                        last_name: msg.from.last_name,
                        date_last_call: new Date(),
                        last_call: text
                    },
                    $inc: { calls: 1 }
                }
            )
            await info.updateOne({}, { $inc: { calls: 1 } })
        } catch {
            await bot.sendMessage(chatId, '–≠—Ç–æ –Ω–µ –≥–æ—Ä–æ–¥!')
        }
    }
})